// -*- C++ -*-
//
// ======================================================================
//
// Brad T. Aagaard, U.S. Geological Survey
// Charles A. Williams, GNS Science
// Matthew G. Knepley, University at Buffalo
//
// This code was developed as part of the Computational Infrastructure
// for Geodynamics (http://geodynamics.org).
//
// Copyright (c) 2010-2021 University of California, Davis
//
// See LICENSE.md for license information.
//
// ======================================================================
//

#if !defined(pylith_topology_visitormesh_hh)
#error "VisitorMesh.icc must be included only from VisitorMesh.hh"
#else

#include "Mesh.hh" // USES Mesh
#include "Field.hh" // USES Field

#include "pylith/utils/error.hh" // USES PYLITH_CHECK_ERROR

// ----------------------------------------------------------------------
// Constructor with field over a mesh.
inline
pylith::topology::VecVisitorMesh::VecVisitorMesh(const Field& field,
                                                 const char* subfield) :
    _dm(NULL),
    _localVec(NULL),
    _section(NULL),
    _localArray(NULL) {
    _dm = field.getDM();assert(_dm);
    initialize(field, subfield);
} // constructor


// ----------------------------------------------------------------------
// Default destructor
inline
pylith::topology::VecVisitorMesh::~VecVisitorMesh(void) {
    clear();
    _dm = NULL;
} // destructor


// ----------------------------------------------------------------------
// Initialized cached data members.
inline
void
pylith::topology::VecVisitorMesh::initialize(const Field& field,
                                             const char* subfield) {
    clear();

    PetscErrorCode err;
    PetscSection fieldSection = field.getLocalSection();assert(fieldSection);
    PetscInt numFields = 0;
    err = PetscSectionGetNumFields(fieldSection, &numFields);PYLITH_CHECK_ERROR(err);

    if (!subfield) {
        _section = fieldSection;
    } else {
        const int fieldIndex = field.getSubfieldInfo(subfield).index;
        assert(fieldIndex >= 0 && fieldIndex < numFields);
        err = PetscSectionGetField(fieldSection, fieldIndex, &_section);PYLITH_CHECK_ERROR(err);
    } // if/else
    err = PetscObjectReference((PetscObject)_section);PYLITH_CHECK_ERROR(err);
    _localVec = field.getLocalVector();assert(_localVec);

    err = VecGetArray(_localVec, &_localArray);PYLITH_CHECK_ERROR(err);
} // initialize


// ----------------------------------------------------------------------
// Default destructor
inline
void
pylith::topology::VecVisitorMesh::clear(void) {
    PetscErrorCode err;

    if (_localVec) {
        err = VecRestoreArray(_localVec, &_localArray);PYLITH_CHECK_ERROR(err);assert(!_localArray);
    } // if

    err = PetscSectionDestroy(&_section);PYLITH_CHECK_ERROR(err);

    _localVec = NULL;
} // clear


// ----------------------------------------------------------------------
// Get the PETSc section.
inline
PetscSection
pylith::topology::VecVisitorMesh::localSection(void) const {
    return _section;
} // localSection


// ----------------------------------------------------------------------
// Get the local PETSc Vec.
inline
PetscVec
pylith::topology::VecVisitorMesh::localVec(void) const {
    return _localVec;
} // localVec


// ----------------------------------------------------------------------
// Get the local coordinates array associated with the local PETSc Vec.
inline
PetscScalar*
pylith::topology::VecVisitorMesh::localArray(void) const {
    return _localArray;
} // localArray


// ----------------------------------------------------------------------
// Get fiber dimension of values at point.
inline
PetscInt
pylith::topology::VecVisitorMesh::sectionDof(const PetscInt point) const {
    assert(_section);
    PetscInt dof;
    PetscErrorCode err = PetscSectionGetDof(_section, point, &dof);PYLITH_CHECK_ERROR(err);
    return dof;
} // sectionDof


// ----------------------------------------------------------------------
// Get fiber dimension for constraints at point.
inline
PetscInt
pylith::topology::VecVisitorMesh::sectionConstraintDof(const PetscInt point) const {
    assert(_section);
    PetscInt dof;
    PetscErrorCode err = PetscSectionGetConstraintDof(_section, point, &dof);PYLITH_CHECK_ERROR(err);
    return dof;
} // sectionConstraintDof


// ----------------------------------------------------------------------
// Get fiber dimension of values at point.
inline
PetscInt
pylith::topology::VecVisitorMesh::sectionSubfieldDof(const PetscInt subfield,
                                                     const PetscInt point) const {
    assert(_section);
    PetscInt dof;
    PetscErrorCode err = PetscSectionGetFieldDof(_section, point, subfield, &dof);PYLITH_CHECK_ERROR(err);
    return dof;
} // sectionDof


// ----------------------------------------------------------------------
// Get offset into values array for point.
inline
PetscInt
pylith::topology::VecVisitorMesh::sectionOffset(const PetscInt point) const {
    assert(_section);
    PetscInt offset;
    PetscErrorCode err = PetscSectionGetOffset(_section, point, &offset);PYLITH_CHECK_ERROR(err);
    return offset;
} // sectionOffset


// ----------------------------------------------------------------------
// Get offset into values array for point.
inline
PetscInt
pylith::topology::VecVisitorMesh::sectionSubfieldOffset(const PetscInt subfield,
                                                        const PetscInt point) const {
    assert(_section);
    PetscInt offset;
    PetscErrorCode err = PetscSectionGetFieldOffset(_section, point, subfield, &offset);PYLITH_CHECK_ERROR(err);
    return offset;
} // sectionOffset


// ----------------------------------------------------------------------
// Get coordinates array associated with closure.
inline
void
pylith::topology::VecVisitorMesh::getClosure(PetscScalar** valuesCell,
                                             PetscInt* valuesSize,
                                             const PetscInt cell) const {
    assert(_dm);
    assert(_section);
    assert(_localVec);
    PetscErrorCode err = DMPlexVecGetClosure(_dm, _section, _localVec, cell, valuesSize, valuesCell);PYLITH_CHECK_ERROR(err);
} // getClosure


// ----------------------------------------------------------------------
// Get coordinates array associated with closure.
inline
void
pylith::topology::VecVisitorMesh::getClosure(scalar_array* values,
                                             const PetscInt cell) const {
    assert(_dm);
    assert(_section);
    assert(_localVec);
    assert(values);
    PetscScalar* valuesCell = &(*values)[0];
    PetscInt valuesSize = values->size();
    PetscErrorCode err = DMPlexVecGetClosure(_dm, _section, _localVec, cell, &valuesSize, &valuesCell);PYLITH_CHECK_ERROR(err);
} // getClosure


// ----------------------------------------------------------------------
// Restore coordinates array associated with closure.
inline
void
pylith::topology::VecVisitorMesh::restoreClosure(PetscScalar** valuesCell,
                                                 PetscInt* valuesSize,
                                                 const PetscInt cell) const {
    assert(_dm);
    assert(_section);
    assert(_localVec);
    PetscErrorCode err = DMPlexVecRestoreClosure(_dm, _section, _localVec, cell, valuesSize, valuesCell);PYLITH_CHECK_ERROR(err);
} // restoreClosure


// ----------------------------------------------------------------------
// Set values associated with closure.
inline
void
pylith::topology::VecVisitorMesh::setClosure(const PetscScalar* valuesCell,
                                             const PetscInt valuesSize,
                                             const PetscInt cell,
                                             const InsertMode mode) const {
    assert(_dm);
    assert(_section);
    assert(_localVec);
    PetscErrorCode err = DMPlexVecSetClosure(_dm, _section, _localVec, cell, valuesCell, mode);PYLITH_CHECK_ERROR(err);
} // setClosure


// ----------------------------------------------------------------------
// Optimize the closure operation.
inline
void
pylith::topology::VecVisitorMesh::optimizeClosure(void) {
    PetscErrorCode err;

    PetscSection indexSection = NULL;
    err = PetscSectionGetClosureIndex(_section, (PetscObject) _dm, &indexSection, NULL);PYLITH_CHECK_ERROR(err);
    if (!indexSection) {
        err = DMPlexCreateClosureIndex(_dm, _section);PYLITH_CHECK_ERROR(err);
    } // if
} // optimizeClosure


// ----------------------------------------------------------------------
// Optimize the closure operation.
inline
void
pylith::topology::VecVisitorMesh::optimizeClosure(const Field& field) {
    PetscErrorCode err;

    PetscSection fieldSection = field.getLocalSection();assert(fieldSection);
    PetscDM dmField = field.getDM();assert(dmField);
    PetscSection indexSection = NULL;
    err = PetscSectionGetClosureIndex(fieldSection, (PetscObject) dmField, &indexSection, NULL);PYLITH_CHECK_ERROR(err);
    if (!indexSection) {
        err = DMPlexCreateClosureIndex(dmField, fieldSection);PYLITH_CHECK_ERROR(err);
    } // if
} // optimizeClosure


// ----------------------------------------------------------------------
// Default constructor.
inline
pylith::topology::MatVisitorMesh::MatVisitorMesh(const PetscMat mat,
                                                 const Field& field) :
    _mat(mat),
    _dm(NULL),
    _section(NULL),
    _globalSection(NULL) {
    PetscSF sf = NULL;
    PetscErrorCode err;

    _dm = field.getDM();assert(_dm);
    _section = field.getLocalSection();assert(_section);
    err = DMGetPointSF(_dm, &sf);PYLITH_CHECK_ERROR(err);assert(sf);
    err = PetscSectionCreateGlobalSection(_section, sf, PETSC_FALSE, PETSC_FALSE, &_globalSection);PYLITH_CHECK_ERROR(err);assert(_globalSection);

    initialize();
} // constructor


// ----------------------------------------------------------------------
// Default destructor
inline
pylith::topology::MatVisitorMesh::~MatVisitorMesh(void) {
    clear();

    _dm = NULL;
    _section = NULL;
    PetscErrorCode err = PetscSectionDestroy(&_globalSection);PYLITH_CHECK_ERROR_NOTHROW(err);assert(!_globalSection);
} // destructor


// ----------------------------------------------------------------------
// Initialized cached data members.
inline
void
pylith::topology::MatVisitorMesh::initialize(void) {
    clear();
} // initialize


// ----------------------------------------------------------------------
// Default destructor
inline
void
pylith::topology::MatVisitorMesh::clear(void) {}


// ----------------------------------------------------------------------
// Set values associated with closure.
inline
void
pylith::topology::MatVisitorMesh::setClosure(const PetscScalar* valuesCell,
                                             const PetscInt valuesSize,
                                             const PetscInt cell,
                                             const InsertMode mode) const {
    assert(_dm);
    assert(_mat);
    assert(_section);
    assert(_globalSection);
    PetscErrorCode err = DMPlexMatSetClosure(_dm, _section, _globalSection, _mat, cell, valuesCell, mode);PYLITH_CHECK_ERROR(err);
} // setClosure


#endif

// End of file
